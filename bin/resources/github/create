#!/bin/bash
# -----
# Script Name: create
# Description: 
# Usage: 
# Author: yifattih
# Date: 04/26/2025
# Other: ChatGPT Assisted
# -----

set -euo pipefail

# shellcheck disable=SC1091
source "${ROLLINGUPS_ROOT_DIR}/bin/logging"
config="${ROLLINGUPS_ROOT_DIR}/resources.yml"

check_file_exists() {
    if [[ ! -f "${1}" ]]; then
        log "ERROR" "Missing required file: ${1}"
        exit 1
    fi
}

check_directory () {
    if [[ ! -d "${1}" ]]; then
        log "ERROR" "Directory does not exist: ${1}"
        exit 1
    fi
}

intialize_repo() {
    local name; name=$(basename "${1}")
    local source_path="${1}"

    log "INFO" "Initializing repository ${name}"
    (
        cd "${source_path}" || { log "ERROR" "Cannot cd into ${source_path}"; exit 1; }
        git init &> /dev/null
        git add . &> /dev/null
        git commit -m "Initial commit" &> /dev/null
    )
    log "SUCCESS" "Repository ${name} initialized"
}

create_repo () {
    local name; name=$(basename "${1}")
    local visibility="${2}"
    local source_path="${1}"

    gh repo create "${name}" --"${visibility}" --source "${source_path}" 2> /dev/null || {
        log "WARN" "Remote 'origin' already exists or could not be added."
    }

    log "SUCCESS" "Repo '${name}' created on GitHub."
}

add_origin_remote () {
    local name; name=$(basename "${1}")
    local source_path="${1}"
    local username

    (
        cd "${source_path}" || { log "ERROR" "Cannot cd into ${source_path}"; exit 1; }

        if git remote | grep -q origin; then
            log "WARN" "Remote 'origin' already exists for ${name}. Skipping."
        else
            username=$(gh api user --jq .login)
            git remote add origin "https://github.com/${username}/${name}.git"
            log "SUCCESS" "Remote 'origin' added for ${name}."
        fi
    )
}

push_branches () {
    local name; name=$(basename "${1}")
    local repo_path="${1}"
    local current_branch

    (
        cd "${repo_path}" || { log "ERROR" "Directory not found: ${repo_path}"; exit 1; }
        current_branch=$(git symbolic-ref --short HEAD)

        log "INFO" "Pushing all branches for ${name}"
        git push --set-upstream origin "${current_branch}" &> /dev/null
        git push origin --all &> /dev/null
        log "SUCCESS" "All branches pushed for ${name}"
    )
}

create_secret() {
    local name="${1}"
    local repository="${2}"
    local value="${3}"

    log "INFO" "Creating secret '${name}'..."
    gh secret set "${name}" \
        --repo "${repository}" \
        --app actions \
        --body "${value}"
    log "SUCCESS" "Secret created!"
}

main () {
    local repo_objs
    local repo_owner

    check_file_exists "${config}"

    repo_objs=$(yq -r '.github.repositories | keys | join(" ")' "${config}")
    repo_owner=$(yq -r '.github.owner' "${config}")

    log "INFO" "Starting GitHub repositories setup for $(basename "${ROLLINGUPS_ROOT_DIR}")..."

    for obj in ${repo_objs}; do
        local repo_name
        local visibility
        local secrets_indexes

        repo_name=$(yq -r ".github.repositories.${obj}.name" "${config}")
        visibility=$(yq -r ".github.repositories.${obj}.visibility" "${config}")
        secrets_indexes=$(
            yq -r ".github.repositories.${obj}.secrets | keys | join(\" \")" "${config}"
        )

        log "INFO" "Processing repository config: ${repo_name} (${visibility})"

        source_path="${ROLLINGUPS_ROOT_DIR}/${repo_name}"
        check_directory "${source_path}"

        intialize_repo "${source_path}"
        create_repo "${source_path}" "${visibility}"
        add_origin_remote "${source_path}"
        push_branches "${source_path}"

        for index in ${secrets_indexes}; do
            local secret_name
            local secret_value

            secret_name=$(yq -r ".github.repositories.${obj}.secrets[${index}].name" "${config}")
            secret_value=$(yq -r ".github.repositories.${obj}.secrets[${index}].value" "${config}")
            
            if [ "${secret_name}" = "GCP_SERVICE_ACCOUNT_KEY"  ]; then
                secret_value=$(cat "${ROLLINGUPS_ROOT_DIR}/gcp-key.json" ) 
            fi

            create_secret "${secret_name}" "${repo_owner}/${repo_name}" "${secret_value}"
        done

        log "INFO" "Creating PAT secret..."
        pat_value=$(gh auth token)
        create_secret "PAT" "${repo_owner}/${repo_name}" "${pat_value}" 
    done

    log "SUCCESS" "GitHub repositories setup complete!"
}

main